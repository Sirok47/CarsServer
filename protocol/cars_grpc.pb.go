// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tutorialpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarsClient is the client API for Cars service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarsClient interface {
	LogIn(ctx context.Context, in *Userdata, opts ...grpc.CallOption) (*Token, error)
	SignUp(ctx context.Context, in *Userdata, opts ...grpc.CallOption) (*Errmsg, error)
	Create(ctx context.Context, in *Carparams, opts ...grpc.CallOption) (*Errmsg, error)
	Get(ctx context.Context, in *Carparams, opts ...grpc.CallOption) (*Carparams, error)
	Delete(ctx context.Context, in *Carparams, opts ...grpc.CallOption) (*Errmsg, error)
	Update(ctx context.Context, in *Carparams, opts ...grpc.CallOption) (*Errmsg, error)
}

type carsClient struct {
	cc grpc.ClientConnInterface
}

func NewCarsClient(cc grpc.ClientConnInterface) CarsClient {
	return &carsClient{cc}
}

func (c *carsClient) LogIn(ctx context.Context, in *Userdata, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/protocol.Cars/LogIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) SignUp(ctx context.Context, in *Userdata, opts ...grpc.CallOption) (*Errmsg, error) {
	out := new(Errmsg)
	err := c.cc.Invoke(ctx, "/protocol.Cars/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) Create(ctx context.Context, in *Carparams, opts ...grpc.CallOption) (*Errmsg, error) {
	out := new(Errmsg)
	err := c.cc.Invoke(ctx, "/protocol.Cars/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) Get(ctx context.Context, in *Carparams, opts ...grpc.CallOption) (*Carparams, error) {
	out := new(Carparams)
	err := c.cc.Invoke(ctx, "/protocol.Cars/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) Delete(ctx context.Context, in *Carparams, opts ...grpc.CallOption) (*Errmsg, error) {
	out := new(Errmsg)
	err := c.cc.Invoke(ctx, "/protocol.Cars/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) Update(ctx context.Context, in *Carparams, opts ...grpc.CallOption) (*Errmsg, error) {
	out := new(Errmsg)
	err := c.cc.Invoke(ctx, "/protocol.Cars/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarsServer is the server API for Cars service.
// All implementations must embed UnimplementedCarsServer
// for forward compatibility
type CarsServer interface {
	LogIn(context.Context, *Userdata) (*Token, error)
	SignUp(context.Context, *Userdata) (*Errmsg, error)
	Create(context.Context, *Carparams) (*Errmsg, error)
	Get(context.Context, *Carparams) (*Carparams, error)
	Delete(context.Context, *Carparams) (*Errmsg, error)
	Update(context.Context, *Carparams) (*Errmsg, error)
}

// UnimplementedCarsServer must be embedded to have forward compatible implementations.
type UnimplementedCarsServer struct {
}

func (UnimplementedCarsServer) LogIn(context.Context, *Userdata) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogIn not implemented")
}
func (UnimplementedCarsServer) SignUp(context.Context, *Userdata) (*Errmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedCarsServer) Create(context.Context, *Carparams) (*Errmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCarsServer) Get(context.Context, *Carparams) (*Carparams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCarsServer) Delete(context.Context, *Carparams) (*Errmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCarsServer) Update(context.Context, *Carparams) (*Errmsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCarsServer) mustEmbedUnimplementedCarsServer() {}

// UnsafeCarsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarsServer will
// result in compilation errors.
type UnsafeCarsServer interface {
	mustEmbedUnimplementedCarsServer()
}

func RegisterCarsServer(s grpc.ServiceRegistrar, srv CarsServer) {
	s.RegisterService(&Cars_ServiceDesc, srv)
}

func _Cars_LogIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Userdata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).LogIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Cars/LogIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).LogIn(ctx, req.(*Userdata))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Userdata)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Cars/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).SignUp(ctx, req.(*Userdata))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Carparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Cars/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).Create(ctx, req.(*Carparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Carparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Cars/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).Get(ctx, req.(*Carparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Carparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Cars/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).Delete(ctx, req.(*Carparams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Carparams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Cars/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).Update(ctx, req.(*Carparams))
	}
	return interceptor(ctx, in, info, handler)
}

// Cars_ServiceDesc is the grpc.ServiceDesc for Cars service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cars_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Cars",
	HandlerType: (*CarsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogIn",
			Handler:    _Cars_LogIn_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _Cars_SignUp_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Cars_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Cars_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Cars_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Cars_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/cars.proto",
}
